// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from whl.djinni

#pragma once

#include "djinni/jni/djinni_support.hpp"
#include "whl/state_listener.hpp"

namespace whl { namespace bridge {

class StateListener final : ::djinni::JniInterface<::whl::StateListener, StateListener> {
public:
    using CppType = std::shared_ptr<::whl::StateListener>;
    using CppOptType = std::shared_ptr<::whl::StateListener>;
    using JniType = jobject;

    using Boxed = StateListener;

    ~StateListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<StateListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<StateListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    StateListener();
    friend ::djinni::JniClass<StateListener>;
    friend ::djinni::JniInterface<::whl::StateListener, StateListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::whl::StateListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void on_new_state(const std::string & name, int32_t value) override;

    private:
        friend ::djinni::JniInterface<::whl::StateListener, ::whl::bridge::StateListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/corendos/whl/bridge/StateListener") };
    const jmethodID method_onNewState { ::djinni::jniGetMethodID(clazz.get(), "onNewState", "(Ljava/lang/String;I)V") };
};

} }  // namespace whl::bridge
