// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from whl.djinni

package io.corendos.whl.bridge;

import java.util.concurrent.atomic.AtomicBoolean;

/** An instance of the sample SDK. */
public abstract class WasmHotLoading {
    /** Register a listener for state change events. */
    public abstract void registerStateListener(StateListener listener);

    /** Trigger a query to be called back with the current state. */
    public abstract void getState();

    /** Update the SDK internal values. */
    public abstract void update(String name, int value);

    /** Create an instance using the provided configuration. */
    public static WasmHotLoading create(Configuration configuration)
    {
        return CppProxy.create(configuration);
    }

    private static final class CppProxy extends WasmHotLoading
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void registerStateListener(StateListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_registerStateListener(this.nativeRef, listener);
        }
        private native void native_registerStateListener(long _nativeRef, StateListener listener);

        @Override
        public void getState()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getState(this.nativeRef);
        }
        private native void native_getState(long _nativeRef);

        @Override
        public void update(String name, int value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_update(this.nativeRef, name, value);
        }
        private native void native_update(long _nativeRef, String name, int value);

        public static native WasmHotLoading create(Configuration configuration);
    }
}
